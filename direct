+-------------------+              +-------------+
|       Car         |<-------------|     Sedan   |
+-------------------+              +-------------+
| - speed: float     |              |             |
| - position: float  |              |             |
| - lane: Lane       |              |             |
+-------------------+              +-------------+
        ^                                      ^
        |                                      |
+-----------------+                +-----------------+
|     Highway     |                |      Lane       |
+-----------------+                +-----------------+
| - length: float  |                | - cars: List[Car]|
| - lanes: List[Lane] |             | - highway: Highway|
+-----------------+                +-----------------+
        ^                                      ^
        |                                      |
+-----------------+                +-----------------+
|    Simulation   |                |    TrafficLight |
+-----------------+                +-----------------+
| - cars: List[Car]|                | - state: str    |
| - highway: Highway|              |                 |
| - time_step: float|              |                 |
+-----------------+                +-----------------+
        ^                                      ^
        |                                      |
+-----------------+                             |
|      Timer      |<----------------------------+
+-----------------+
| - callback: function |
| - interval: float |
+-----------------+

 
На цій діаграмі ми можемо побачити наступні класи та їх взаємозв'язки:
•	Car: базовий клас для всіх машин, включаючи легковаговики
•	Sedan: клас для легковаговика
•	Highway: клас, що відповідає за автобан
•	Lane: клас для полоси руху на автобані
•	Simulation: клас, що відповідає за імітацію руху
•	TrafficLight: клас, що відповідає за світлофори на автобані
•	Timer: клас, що відповідає за таймер для регулювання часу в імітації
Зв'язки між класами описані за допомогою стрілок, що вказують на спадкування або на залежність. 
Зауважте, що Car залежить від Lane, а Lane залежить від Highway. Також Simulation містить список машин та автобан, 
а Timer використовується для керування часом в імітації.

Далі, потрібно реалізувати програму з візуальним інтерфейсом, що дозволяє використовувати розроблений легковаговик. 
Для цього ми можемо використовувати мову програмування Python та бібліотеку Tkinter.
Ось приклад коду програми з візуальним інтерфейсом:
from tkinter import *

# імпортуємо класи з діаграми класів
from car import Sedan
from highway import Highway, Lane
from simulation import Simulation

class App:
    def __init__(self, master):
        self.master = master
        master.title("Simulation of Cars on Highway")

        # Створюємо віджет Canvas для відображення автобану
        self.canvas = Canvas(master, width=800, height=400)
        self.canvas.pack()

        # Створюємо автобан з двома полосами руху
        self.highway = Highway()
        self.lane1 = Lane(self.highway, 0)
        self.lane2 = Lane(self.highway, 1)

        # Створюємо легковаговик
        self.car = Sedan()

        # Створюємо кнопки для керування імітацією
        self.start_button = Button(master, text="Start", command=self.start_simulation)
        self.start_button.pack(side=LEFT)

        self.stop_button = Button(master, text="Stop", command=self.stop_simulation)
        self.stop_button.pack(side=LEFT)

    def start_simulation(self):
        # Створюємо імітацію руху self.simulation = Simulation(self.car, [self.lane1, self.lane2]) self.simulation.start()
    # Починаємо відображення руху на Canvas
    self.animate()

def stop_simulation(self):
    # Зупиняємо імітацію руху
    self.simulation.stop()

def animate(self):
    # Очищуємо відображення на Canvas
    self.canvas.delete(ALL)

    # Відображаємо автобан та легковаговик
    self.canvas.create_rectangle(0, 0, 800, 400, fill="gray")
    self.lane1.draw(self.canvas)
    self.lane2.draw(self.canvas)
    self.car.draw(self.canvas)

    # Оновлюємо положення легковаговика
    self.simulation.update()

    # Запускаємо цикл з відображенням
    self.master.after(20, self.animate)
Запускаємо програму
root = Tk() app = App(root) root.mainloop()

Для того, щоб програма коректно працювала, ми повинні додати логіку імітації руху машин в метод start_simulation.
Можливо, ми захочемо створити окремий клас для імітації руху та додати його до нашої програми. 
Також, ми можемо розширити інтерфейс, додавши можливість вибору типу машин, керуванням швидкістю та іншими параметрами.
Наприклад, для вибору типу машин ми можемо додати відповідні елементи у наш візуальний інтерфейс:
class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        self.car_type_label = tk.Label(self, text="Car Type:")
        self.car_type_label.pack(side="left")
Наступним кроком є створення візуального інтерфейсу з використанням бібліотеки Tkinter. 
Нам потрібно створити вікно програми та розмістити на ньому різні елементи керування, такі як кнопки, текстові поля та малюнки.
Ось приклад коду, який створює вікно програми з кнопкою "Старт" та текстовим полем для введення часу імітації:
import tkinter as tk

class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        self.time_label = tk.Label(self, text="Час імітації (сек):")
        self.time_label.pack(side="left")

        self.time_entry = tk.Entry(self)
        self.time_entry.pack(side="left")

        self.start_button = tk.Button(self, text="Старт", command=self.start_simulation)
        self.start_button.pack(side="left")

    def start_simulation(self):
        simulation_time = float(self.time_entry.get())
        # Запуск імітації руху машин
        pass

root = tk.Tk()
app = Application(master=root)
app.mainloop()
Цей код створює вікно програми з текстовим полем та кнопкою "Старт".
При натисканні на кнопку, викликається метод start_simulation, який отримує час імітації з текстового поля та запускає імітацію руху машин.
Далі нам потрібно додати елементи керування для вибору типу машини та керування її рухом. 
Наприклад, ми можемо додати випадаючий список для вибору типу машини та кнопки для керування її рухом вперед та назад.
Ось приклад коду, який додає випадаючий список для вибору типу машини та кнопки для керування рухом:
class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        self.time_label = tk.Label(self, text="Час імітації (сек):")
        self.time_label.pack(side="left")

        self.time_entry = tk.Entry(self)
        self.time_entry.pack(side="left")

        self.vehicle_label = tk.Label(self, text="Тип машини:")
        self.vehicle_label.pack(side="left")
Далі нам потрібно додати функціональність кнопкам Start та Stop. При натисканні на кнопку Start має початися імітація руху машин, 
а при натисканні на кнопку Stop має зупинитися імітація.
Оскільки ми хочемо виконувати імітацію руху машин у фоновому режимі, нам потрібно використати модуль threading для створення окремого потоку для імітації руху. 
Також ми використаємо змінну running, яка буде використовуватися для визначення, чи треба продовжувати імітацію руху, чи ні.
Ось як виглядатиме оновлений код для додавання функціональності кнопкам Start та Stop:
import threading
import time
import random
import tkinter as tk

class Car:
    def __init__(self, canvas, x, y, speed):
        self.canvas = canvas
        self.image = tk.PhotoImage(file="car.gif")
        self.id = canvas.create_image(x, y, image=self.image)
        self.speed = speed

    def move(self):
        self.canvas.move(self.id, self.speed, 0)
        if self.canvas.coords(self.id)[0] > 700:
            self.canvas.coords(self.id, -100, random.randint(50, 250))

class Simulation:
    def __init__(self, canvas):
        self.canvas = canvas
        self.cars = []
        self.running = False

    def add_car(self, car):
        self.cars.append(car)

    def start(self):
        self.running = True
        while self.running:
            for car in self.cars:
                car.move()
            self.canvas.update()
            time.sleep(0.05)

    def stop(self):
        self.running = False

def create_car(simulation):
    x = -100
    y = random.randint(50, 250)
    speed = random.randint(5, 10)
    car = Car(simulation.canvas, x, y, speed)
    simulation.add_car(car)

def main():
    root = tk.Tk()
    root.title("Car Simulation")

    canvas = tk.Canvas(root, width=700, height=300)
    canvas.pack()

    simulation = Simulation(canvas)

    for i in range(10):
        create_car(simulation)

    start_button = tk.Button(root, text="Start", command=lambda: threading.Thread(target=simulation.start).start())
    start_button.pack(side=tk.LEFT)

    stop_button = tk.Button(root, text="Stop", command=simulation.stop)
    stop_button.pack(side=tk.LEFT)

    root.mainloop()

if __name__ == "__main__":
    main()
У цьому оновленому коді ми створили функцію create_car, яка створює нові автомобілі та додає їх до симуляції.
